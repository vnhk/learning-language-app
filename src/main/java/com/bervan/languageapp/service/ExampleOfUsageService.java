package com.bervan.languageapp.service;

import com.bervan.common.service.AIService;
import com.bervan.common.service.OpenAIService;
import com.bervan.core.model.BervanLogger;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
public class ExampleOfUsageService {
    private final String url = "https://www.diki.pl/slownik-angielskiego?q=";
    private final BervanLogger logger;
    @Value("${openai.api.key}")
    private String apiKey;
    private final AIService exampleOfUsageAI;

    public ExampleOfUsageService(BervanLogger logger) {
        this.logger = logger;
        this.exampleOfUsageAI = new OpenAIService(
                """
                                Your task is to generate example sentences (n sentences) with the given word / words (in correct order, with small changes if needed).
                                Purpose of your task is to prepare a data for quiz for english learner.
                                You are allowed to change format and tense of the word / words.
                                If given sentence has more than 3-4 words you are allowed to skip it.
                                If given word or sentence makes no sense or it's incorrect you are allowed to skip it.
                                Sentences generated by you must make sense. Must not be very complicated. However should show the context. Remove '.' from the end of sentence.
                                Your response MUST HAVE a following format: ${input_given_by_me}:[${your_formatted_word_1}=${your_sentence_1}]|[${your_formatted_word_2}=${your_sentence_2}]
                                ${your_formatted_word} MUST BE DIRECTLY ADDED IN ${your_sentence} It will be removed by me to prepare a gap in a quiz.
                                Nothing less nothing more.
                                My inputs will be in format: ${word or sentence}:3 - it means that I need 3 example sentences with the word or sentence I provided.
                                If you decide to skip sentence or word you returns: ${word or sentence}:SKIPPED
                                Just it, no explanations, no additional information.
                                Remember your response will be parsed by code, so don't change format.
                                Example 1 simple change: "book:1" Your answer: book:[book=My favorite book is Harry Potter]
                                Example 2 you decided to change format: "book:1" Your answer: book:[booked=I booked a table for two at the Italian restaurant]
                                Example 3 sentence: "book a table:1" Your answer: book a table:[booked a table=I booked a table for two at the Italian restaurant]
                                Respond only with the language level. Nothing else.
                        """
        );
    }

    public List<String> createExampleOfUsage(String sourceText) {
        try {
            return find(sourceText, 5);
        } catch (Exception e) {
            logger.error("Could not create example of usage!");
        }
        return new ArrayList<>();
    }

    public Map<String, List<String>> createExampleOfUsage(String sourceText, int MAX_EXAMPLES) {
        try {
            Map<String, List<String>> res = new HashMap<>();
            res.put(sourceText, find(sourceText, MAX_EXAMPLES));
        } catch (Exception e) {
            logger.error("Could not create example of usage!");
        }
        return new HashMap<>();
    }

    public Map<String, List<String>> createExampleOfUsage(String sourceText, int MAX_EXAMPLES, boolean withAI) {
        try {
            if (!withAI) {
                return createExampleOfUsage(sourceText, MAX_EXAMPLES);
            }
            return findWithAI(sourceText, MAX_EXAMPLES);
        } catch (Exception e) {
            logger.error("Could not create example of usage!");
            return createExampleOfUsage(sourceText, MAX_EXAMPLES);
        }
    }

    private Map<String, List<String>> findWithAI(String sourceText, int maxExamples) {
        String aiResponse = exampleOfUsageAI.askAI(sourceText + ":" + maxExamples, OpenAIService.GPT_3_5_TURBO, 0.2, apiKey);
        return parseAIInput(aiResponse);
    }


    private Map<String, List<String>> parseAIInput(String input) {
        Map<String, List<String>> map = new LinkedHashMap<>();
        String[] parts = input.split(":", 2);
        if (parts.length < 2) return map;

        String examplesPart = parts[1];
        Pattern pattern = Pattern.compile("\\[(.*?)=(.*?)]");
        Matcher matcher = pattern.matcher(examplesPart);

        while (matcher.find()) {
            String key = matcher.group(1).trim();
            String value = matcher.group(2).trim();
            if (!map.containsKey(key)) {
                map.put(key, new ArrayList<>());
            }
            map.get(key).add(value);
        }

        return map;
    }

    private List<String> find(String sourceText, int MAX_EXAMPLES) throws IOException {
        sourceText = sourceText.toLowerCase();
        List<String> examples = new ArrayList<>();
        Connection connection = Jsoup.connect(url + sourceText)
                .userAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1.2 Safari/605.1.15");
        Document document = connection.get();
        Elements exampleSentences = document.getElementsByClass("exampleSentence");
        if (exampleSentences.size() != 0) {
            for (Element exampleSentence : exampleSentences) {
                try {
                    String exampleSentenceTranslationToBeRemoved = exampleSentence.getElementsByClass("exampleSentenceTranslation").get(0).text().trim();
                    String val = exampleSentence.text().replace(exampleSentenceTranslationToBeRemoved, "").trim();
                    examples.add(val);
                } catch (Exception e) {
                    logger.error("Could not create example of usage!");
                }
            }
        } else {
            exampleSentences = document.getElementsByClass("foundCollocationContent");
            for (Element exampleSentence : exampleSentences) {
                Elements ps = exampleSentence.select("p");
                for (Element p : ps) {
                    examples.add(p.text().trim());
                }
            }
        }

        if (exampleSentences.size() == 0) {
            exampleSentences = document.select(".hiddenAdditionalSentences > p[lang='en']");
            for (Element exampleSentence : exampleSentences) {
                examples.add(exampleSentence.text().trim());
            }
        }

        if (examples.size() > MAX_EXAMPLES) {
            List<String> fiveExamples = new ArrayList<>();
            for (int i = 0; i < MAX_EXAMPLES; i++) {
                fiveExamples.add(examples.get(i));
            }

            return fiveExamples;
        }

        return examples;
    }
}
